import cv2
import numpy as np
import matplotlib.pyplot as plt

#To get an image that clearly depicts land and sea with two contrasting colours
bgrvalue_land = [34, 150, 31]  
Change_colour = [0, 255, 255]   

filepath=input("Enter complete file path:")
image = cv2.imread(filepath)

lower = np.array([4, 120, 1]) 
upper = np.array([64, 180, 61])
mask = cv2.inRange(image, lower, upper)

image[mask == 255] = Change_colour
cv2.imwrite("land&seacontrasted.jpg", image)

image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
plt.figure(figsize=(6,6))
plt.imshow(image_rgb)
plt.axis("off")
plt.title("Land & Sea Contrasted")
plt.show()

# To detect shapes and casualties
#Priliminaries to detect shapes
img = cv2.imread(filepath)
rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)

lower_blue = np.array([90, 50, 50])
upper_blue = np.array([130, 255, 255])

lower_green = np.array([4, 120, 1]) 
upper_green = np.array([64, 180, 61])

mask_blue = cv2.inRange(hsv, lower_blue, upper_blue)
mask_green = cv2.inRange(hsv, lower_green, upper_green)

final_mask = mask_blue | mask_green

inverted_mask = cv2.bitwise_not(final_mask)
finalresult = cv2.bitwise_and(rgb, rgb, mask=inverted_mask)

gray = cv2.cvtColor(finalresult, cv2.COLOR_RGB2GRAY)
_, thresh = cv2.threshold(gray, 1, 255, cv2.THRESH_BINARY)

#Colour detection
color_ranges = {3: [(np.array([0, 100, 100]), np.array([10, 255, 255])),
            (np.array([160, 100, 100]), np.array([180, 255, 255]))],
    2: [(np.array([20, 100, 100]), np.array([35, 255, 255]))],
    1: [(np.array([35, 50, 50]), np.array([85, 255, 255]))]}

def detect_colour(hsv_img, contour):
    mask = np.zeros(hsv_img.shape[:2], dtype="uint8")
    cv2.drawContours(mask, [contour], -1, 255, -1)
    mean_val = cv2.mean(hsv_img, mask=mask)  
    h, s, v, _ = mean_val
    
    for emergency, ranges in color_ranges.items():
        for lower, upper in ranges:
            if lower[0] <= h <= upper[0] and lower[1] <= s <= upper[1] and lower[2] <= v <= upper[2]:
                return emergency
    return 0

#Actual detection of shapes, colours and assigning priority
contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
output = rgb.copy()

for cnt in contours:
    epsilon = 0.02 * cv2.arcLength(cnt, True)
    approx = cv2.approxPolyDP(cnt, epsilon, True)

    vertices = len(approx)
    if vertices == 3:
        color = (255, 0, 0)   
        shape_name = "Triangle"
        casualty=2
        emergency=detect_colour(hsv,cnt)
        Priority=casualty*emergency
    elif vertices == 8:
        color = (0, 255, 0)  
        shape_name = "Circle"
        casualty=0
    elif vertices==10:
        color = (0, 0, 255)   
        shape_name = "Star"
        casualty=3
        emergency=detect_colour(hsv,cnt)
        Priority=casualty*emergency
    elif vertices==5:   #Sample images have 5 vertices for square,checked using separate block of code
        color = (255, 255, 0) 
        shape_name = "Square"
        casualty=1
        emergency=detect_colour(hsv,cnt)
        Priority=casualty*emergency
    else:
        pass

# display
plt.figure(figsize=(12,6))

plt.subplot(1,2,1)
plt.title("Final Masked Image")
plt.imshow(finalresult)
plt.axis("off")

plt.subplot(1,2,2)
plt.title("Detected")
plt.imshow(output)
plt.axis("off")

plt.show()
